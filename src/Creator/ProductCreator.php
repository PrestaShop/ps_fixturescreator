<?php

namespace PrestaShop\Module\PsFixturesCreator\Creator;

use Doctrine\DBAL\Connection;
use Faker\Generator as Faker;
use PrestaShopBundle\Entity\Lang;
use PrestaShopBundle\Entity\Repository\LangRepository;
use Product;

class ProductCreator extends AbstractProductCreator
{
    private LangRepository $langRepository;
    private Faker $faker;

    public function __construct(
        LangRepository $langRepository,
        FeatureCreator $featureCreator,
        Connection $connection,
        string $dbPrefix,
        Faker $faker
    ) {
        parent::__construct($featureCreator, $connection, $dbPrefix);
        $this->langRepository = $langRepository;
        $this->faker = $faker;
    }

    public function generate(int $number, int $numberOfFeatures, int $numberOfFeatureValues, int $shopId): void
    {
        for ($i = 0; $i < $number; ++$i) {
            $productId = $this->createProduct($shopId);
            $this->associateFeatures($productId, $numberOfFeatures, $numberOfFeatureValues, $shopId);
        }
    }

    private function createProduct(int $shopId): int
    {
        $product = new Product();
        $product->id_shop_list = [$shopId];
        $productName = $this->faker->productName;

        $productNames = [];
        $descriptions = [];
        $shortDescriptions = [];
        /** @var Lang $lang */
        foreach ($this->langRepository->findAll() as $lang) {
            $productNames[$lang->getId()] = $productName . ' ' . $lang->getLocale();
            $descriptions[$lang->getId()] = 'This is a fake product generated by the Faker library ' . $lang->getLocale();
            $shortDescriptions[$lang->getId()] = 'Generated by the Faker library ' . $lang->getLocale();
        }

        $product->name = $productNames;
        $product->description = $descriptions;
        $product->description_short = $shortDescriptions;
        $product->price = $this->faker->randomFloat(2, 1, 1000);
        $product->reference = $this->faker->bothify('FAKE-PRODUCT-????');
        $product->active = true;

        $product->add();

        $categories = [2, 3, 4];
        $product->updateCategories($categories);

        return $product->id;
    }
}
